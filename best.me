/*
    best.me -- esp-best build targets
 */

Me.load({
    mixin: `
        function gzip(path: Path) {
            path.joinExt('gz', true).remove()
            run('gzip ' + path)
            path.write(run('gunzip -c ' + path + '.gz', {noshow: true}))
        }
        let app = me.package.app
        blend(app, app.modes[app.mode])
        app.http ||= {}
        app.http.content ||= {}
        let combine = app.http.content.combine
        let compress = app.http.content.compress
        let minify = app.http.content.minify
        me.minjs = (minify && minify.contains('js')) ? 'min.js' : 'js'
    `,

    targets: {
        'build-best': {
            home: '${TOP}',
            build: `
                run('esp ' + ((me.options.rebuild) ? '-r' : '') + ' compile')
            `,
        },

        'clean-best': {
            home: '${TOP}',
            type: 'clean',
            action: "rm('cache/*')",
        },

        'clean-best-minified': {
            home: '${TOP}',
            type: 'clean',
            action: `
                rm('**/*.min.*')
                rm('client/app/all.html.*')
            `
        },

        'all.min.css': {
            home: '${TOP}',
            enable: `combine.contains('css')`,
            path: 'client/css/all-${settings.version}.min.css',
            files: [ 'client/css/*.less' ],
            build: `
                let switches = minify.contains('css') ? '-compress' : ''
                let switches = ''
                trace('Parse', '*.less')
                if (minify.contains('css')) {
                    trace('Minify', TARGET.path.relative)
                    switches = '-compress'
                }
                rm(TARGET.path)
                strace('Run', 'recess ' + switches + ' -compile client/css/all.less')
                let result = Cmd.run('recess ' + switches + ' -compile client/css/all.less')
                if (result == '') {
                    throw 'Cannot build recess ' + switches + ' -compile client/css/all.less'
                }
                rm('client/css/all.css')
                for each (f in Path('client/css').files('*.css')) {
                    result += f.readString()
                }
                TARGET.path.write(result)
            `,
        },

        'all.min.css.gz': {
            home: '${TOP}',
            enable: `compress.contains('css')`,
            path: 'client/css/all-${settings.version}.min.css.gz',
            files: [ 'client/css/all-${settings.version}.min.css' ],
            depends: ['all.min.css']
            build: `
                trace('Compress', TARGET.path.relative)
                gzip('client/css/all-${settings.version}.min.css')
            `,
        },

        /*
            Minify html pages using htmlmin. Create *.min.html
         */
        'minify-html': {
            home: '${TOP}',
            enable: `minify.contains('html')`,
            path: 'client/app/all.html.js',
            files: [ '**.html' ],
            exclude: /client\/paks\/all.min.html/,
            build: `
                let list = []
                trace('Minify', '*.min.html')
                if (!Cmd.locate('htmlmin')) {
                    trace('Warning', 'Cannot locate "htmlmin" to minify.')
                }
                for each (f in Path('client').files('**.html', {exclude: /\\.min.html/})) {
                    let minified = f.replaceExt('min.html')
                    if (!minified.exists || minified.modified < f.modified) {
                        if (Cmd.locate('htmlmin')) {
                            run('htmlmin ' + f)
                        } else {
                            f.copy(minified)
                        }
                    }
/* UNUSED
                    if (compress.contains('html') && !combine.contains('html')) {
                        gzip(minified)
                    }
*/
                }
            `,
        },

        /*
            Catenate html pages into all.html.js
         */
        'all.html.js': {
            home: '${TOP}',
            enable: `combine.contains('html')`,
            path: 'client/app/all.html.js',
            files: [ 'client/app/all.html.js' ],
            depends: ['minify-html']
            build: `
                let list
                TARGET.path.remove()
                if (minify.contains('html')) {
                    list = Path('client').files('**.min.html')
                } else {
                    list = Path('client').files('**.html', {exclude: /\\.min.html/})
                }
                let all = Path('client/app/all.html.js')
                trace('Convert', '*.html to ' + all)
                all.append('angular.module("app").run(function(Esp, $templateCache) {')
                for each (let f:Path in list) {
                    let basefile = f.relativeTo('client').replace('.min.html', '.html')
                    let data = f.readLines()
                    for (let [key,value] in data) {
                        data[key] = value.replace(/"/g, '\\\\"')
                    }
                    data = data.join('\\\\\n')
                    all.append('\n    $templateCache.put(Esp.url("/' + basefile + '"), "' + data + '");\n')
                    f.replaceExt('.min.html').remove()
                }
                all.append('});')
            `,
        },

        /*
            Compress html.js.gz if not combining with *.js
         */
        'html.js.gz': {
            home: '${TOP}',
            enable: `combine.contains('html') && compress.contains('html') && !combine.contains('js')`,
            path: 'client/app/all.html.js.gz',
            files: [ 'client/app/all.html.js' ],
            depends: ['all.html.js']
            build: `
                gzip('client/app/all.html.js')
            `,
        },

        /*
            Minify *.js and create *.min.js
         */
        'min.js': {
            home: '${TOP}',
            enable: `minify.contains('js')`,
            path: 'client/all-${settings.version}.min.js',
            files: [ '**.js' ],
            exclude: /client\/paks\/all.min.js|client\/paks\/spare\/|client\/paks\/html5shiv/,
            depends: ['all.html.js'],
            build: `
                trace('Minify', '*.js')
                if (!Cmd.locate('uglifyjs')) {
                    trace('Warning', 'Cannot locate "uglify" to minify. Will just catenate scripts.')
                }
                if (Cmd.locate('ngmin')) {
                    for each (f in Path('client/app').files('**.js', {exclude: /\\.min.js|\\.ng.js/})) {
                        let ng = f.replaceExt('ng.js')
                        if (!ng.exists || ng.modified < f.modified) {
                            run('ngmin ' + f + ' ' + ng)
                            run('uglifyjs -o ' + f.replaceExt('min.js') + ' ' + ng)
                            ng.remove()
                        }
                    }
                }
                let list = []
                for each (pattern in me.package.app.client.scripts) {
                    if (pattern.contains('less/less.js') && combine.contains('css')) continue
                    for each (script in Path('client').files(pattern, {exclude: /\\.min.js/})) {
                        list.push(script)
                    }
                }
                for each (f in list) {
                    let minified = f.replaceExt('min.js')
                    if (!minified.exists || minified.modified < f.modified) {
                        if (Cmd.locate('uglifyjs')) {
                            run('uglifyjs -o ' + f.replaceExt('min.js') + ' ' + f)
                        } else {
                            f.copy(f.replaceExt('min.js'))
                        }
                    }
                    if (compress.contains('js') && !combine.contains('js')) {
                        gzip(minified)
                    }
                }
            `,
        },

        /* 
            Catenate *.js (*.min.js) to create all.js (all.min.js)
         */
        'all.js': {
            home: '${TOP}',
            enable: `combine.contains('js')`,
            path: 'client/all-${settings.version}.${minjs}',
            files: [ '**.min.js' ],
            exclude: /client\/paks\/all.min.js|client\/paks\/spare\/|client\/paks\/html5shiv/,
            depends: ['min.js'],
            build: `
                trace('Catenate', TARGET.path.relative)
                rm('client/all' + me.minjs)
                let list = []
                for each (pattern in me.package.app.client.scripts) {
                    if (pattern.contains('less/less.js') && combine.contains('css')) continue
                    for each (script in Path('client').files(pattern, {exclude: /\\.min.js/})) {
                        list.push(script)
                    }
                }
                list += Path('client').files('app/**.js', {exclude: /\\.min.js|main.js/})
                let all = TARGET.path
                for each (let f:Path in list) {
                    strace('Append', f)
                    if (minify.contains('js')) {
                        f = f.replace('.js', '.min.js')
                    }
                    all.append(';' + f.readString())
                }
            `,
        },

        /*
            Compress all.js (all.min.js) to create all.js.gz (all.min.js.gz)
         */
        'all.js.gz': {
            home: '${TOP}',
            enable: `compress.contains('js')`,
            path: 'client/all-${settings.version}.${minjs}.gz',
            files: [ 'client/all-${settings.version}.${minjs}' ],
            depends: ['all.js'],
            build: `
                trace('Compress', TARGET.path.relative)
                gzip(TARGET.path.trimExt('gz'))
            `,
        },
    },
})
